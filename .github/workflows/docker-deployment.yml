name: Build and Push Docker

on:
  schedule:
    - cron: '0 15 * * *'
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      python_target: "3.10,3.11,3.12,3.13"
      latest_version: '3.13'
    
    outputs:
      targets: ${{ steps.check.outputs.targets }}
      latest_version: ${{ steps.check.outputs.latest_version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: apt update
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends --no-install-suggests \
            lib32stdc++6 lib32gcc-s1 ca-certificates

      - name: Get SteamCMD version
        run: |
          mkdir -p ~/steamcmd
          curl -fsSL 'https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz' | tar xvzf - -C ~/steamcmd
          STEAMCMD_VER=$(~/steamcmd/steamcmd.sh +quit | awk '/version [0-9]+/ {print $NF}')
          echo "STEAMCMD_VER=$STEAMCMD_VER" >> $GITHUB_ENV

      - name: Get docker digest
        run: |
          original_ifs=$IFS
          IFS=","
          for ver in $python_target; do
            sha=$(docker manifest inspect python:$ver-slim-bookworm --verbose | jq -r '.[0].Descriptor.digest')
            echo "PYTHON_$ver=$sha" >> $GITHUB_ENV
          done
          IFS=$original_ifs

      - name: Check version
        id: check
        run: |
          original_ifs=$IFS
          IFS=","
          change_ver=()

          steamcmd_old_version=$(cat version.json | jq -r ".Steamcmd")
          if [ "$steamcmd_old_version" != "$STEAMCMD_VER" ]; then
            jq --arg STEAMCMD_VER "$STEAMCMD_VER" '.Steamcmd=$STEAMCMD_VER' version.json > version.json.tmp && mv version.json.tmp version.json
            for ver in $python_target; do
              change_ver+=("$ver")
              python_sha="PYTHON_$ver"
              new_sha=$(printenv "$python_sha")
              jq --arg ver "$ver" --arg new_sha "$new_sha" '.Python[$ver]=$new_sha' version.json > version.json.tmp && mv version.json.tmp version.json
            done
          else
            for ver in $python_target; do
              old_python_sha=$(jq -r --arg ver "$ver" '.Python[$ver]' version.json)
              python_sha="PYTHON_$ver"
              new_sha=$(printenv "$python_sha")
              if [ "$old_python_sha" != "$new_sha" ]; then
                change_ver+=("$ver")
                jq --arg ver "$ver" --arg new_sha "$new_sha" '.Python[$ver]=$new_sha' version.json > version.json.tmp && mv version.json.tmp version.json
              fi
            done
          fi

          IFS=$original_ifs

          if [ ${#change_ver[@]} -ne 0 ]; then
            echo "Change ver=${change_ver[@]}"
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add .
            git commit -m "change version"
            git push origin main

            echo "targets=$(printf '%s\n' "${change_ver[@]}" | jq -R . | jq -s -c .)"
            echo "latest_version=$latest_version"
            echo "targets=$(printf '%s\n' "${change_ver[@]}" | jq -R . | jq -s -c .)" >> $GITHUB_OUTPUT
            echo "latest_version=$latest_version" >> $GITHUB_OUTPUT
          else
            echo 'targets=["null"]'
            echo "latest_version=$latest_version"
            echo 'targets=["null"]' >> $GITHUB_OUTPUT
            echo "latest_version=$latest_version" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - check-version
    env:
      latest_version: ${{ needs.check-version.outputs.latest_version }}
    strategy:
      matrix:
        python_version: ${{ fromJSON(needs.check-version.outputs.targets) }}

    steps:
      - name: Echo version
        run: echo "python_version=${{ matrix.python_version }}"

      - name: Checkout code
        if: ${{ matrix.python_version != 'null' }}
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: ${{ matrix.python_version != 'null' }}
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ matrix.python_version != 'null' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        if: ${{ matrix.python_version != 'null' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set environment variables
        if: ${{ matrix.python_version != 'null' }}
        run: |
          echo "LOWER_CASE_REPOSITORY_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
          echo "LOWER_CASE_REPOSITORY=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}" >> $GITHUB_ENV

      - name: Push image
        if: ${{ matrix.python_version != 'null' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          provenance: false
          no-cache: true
          pull: true
          tags: |
            charahiro/${{ env.REPOSITORY_NAME }}:${{ matrix.python_version }}
            ghcr.io/${{ env.LOWER_CASE_REPOSITORY }}:${{ matrix.python_version }}
            ${{ matrix.python_version == env.latest_version && format('charahiro/{0}:latest', env.REPOSITORY_NAME) || '' }}
            ${{ matrix.python_version == env.latest_version && format('ghcr.io/{0}:latest', env.LOWER_CASE_REPOSITORY) || '' }}
          build-args: |
            PYTHON_VERSION=${{ matrix.python_version }}
